◆カリング手法を考えてみる

※16x16x16を1チャンクとする(4096ブロック)


1)視錐台カリング
　　→視錐台から完全に外になるチャンクを除外する。
　　→視錐台に一部入るチャンクから、完全に視錐台の外になるブロックを除外する。
　　　(視錐台に完全に入るチャンクからは、ブロックの除外処理は行わない)

　　・除外されたチャンクでは処理を行わない
　　・有効チャンク内でも除外されたブロックでは処理を行わない

2)完全に見えなくなってしまうブロックを除外する

　　●プロッマ単位での除外

　　　　周囲を１６の区画に分けて処理する。

　　　　視点と同じ座標のブロック
　　　　　視点に近い側の近接する位置に１つまたは２つのプロックが存在する場合は除外
　　　　視点の上の座標のブロック
　　　　　視点に近い側の近接する位置に３つのプロックが存在する場合は除外
　　　　視点の下の座標のブロック
　　　　　視点に近い側の近接する位置に３つのプロックが存在する場合は除外
　　　　

　　　　



　・見える面は最小で１～最大で３である。
　・３面全ての隣接にブロックが存在すればそのプロックは見えない。
　・ブロックの各面の中心から視点に向かって伸ばしたベクトルとブロックの各面の法線ベクトルとの角度(内積)で、
　　その面が視点方向を向いているかわかる。　→０度(1)～９０(0)度未満で向いている
　・見える面の反対の面は見えない。しかし、見えない面の反対の面が見えるとは限らない。

　・視点と同じ高さのブロック座標のブラック　→　上下面の検査はしない(常に非表示オンであるため)　そのかわりブロックが存在すれば隣接ブロックの隣接面の非表示フラグをオンにする。
　・視点より上のブロック座標のブロック　　　→　下面のみ向いている方向となり上面は強制的に非表示フラグがオンになる
　・視点より下のブロック座標のブロック　　　→　上面のみ向いている方向となり下面は強制的に非表示フラグがオンになる


　　　視点に近いブロックから検査した方が処理が少なくなる(非表示フラグが先にオンになり、検査処理をスキップできる)
　　　６面(６ビット)の非表示フラグがオン(63)になっているブロックは処理を無視できる。

　　　●非表示面の検査(チェック)
　　　　有効なブロックでループ処理
　　　　　→非表示フラグがオンになっていない面を検査
　　　　　　→向いている方向がわかる(1面～3面)
　　　　　　　　→向いている方向と反対方向に非表示フラグをオン
　　　　　　　　　　→非表示になる面に隣接しているプロックの隣接面の非表示フラグをオン


　　東面
　　　cx, cy, cx
　　　+1,  0,  0

　　　cx > 0 で表示面

　　西面
　　　cx, cy, cy
　　　-1,  0,  0

　　　cx > 0 で表示面

　　　既に非表示フラグがオンの場合は以下の処理を行わない

　　　　非表示面判定が出た場合は、非表示フラグをオンにする。
　　　　表示判定が出た場合は、反対面の非表示フラグをオンにする。
　　　
　　　　非表示フラグをオンにした場合、非表示面に隣接するプロックが存在すれぱ、その隣接ブロックの非表示面に隣接する面の非表示フラグもオンにする。






3)不透明ブロックを近方から描画する

　・１面以上表示対象になっているブロックから表示面を集めたメッシュを生成する


4)半透明ブロックを遠方から描画する


===============================================================================

毎フレーム、見える範囲全てのメッシュを作り直すのはコストが大きそうなので、

1)離れたチャンクのブロックは、表示される面だけで構成されたスタティックな1つのメッシュを作る。
　　→１面でも表示されるブロックを選定する。
　　　→表示される面だけを集めたメッシュを作る。

2)現在チャンクは、１面以上見えるブロックをインスタンス化し、ブロックの増減に応じて、
　増減したブロックに隣接する位置のブロックのインスタンスを生成・破棄する。


1)2)は、カメラの位置は関係なく、６面のいずれかに隣接するプロックが存在しない場合は、表示面のあるブロックとみなす。
※６面全てに隣接するブロックが存在する場合は、そのブロックは非表示とみなされる。


現在位置の半径7x7ブロックに含まれるチャンクをインスタンス化する。
　→最小１チャンク～最大８チャンク　→最小4,096ブロック～最大32,768ブロック
　　→しかし、32,768ブロックをインスタンス化したら重すぎるので、
　　　周囲６面が完全に埋まったブロックは除外する。


チャンク内の単純な移動では、ブロックのインスタンスの増減が起こらないようにする。


=======================================================================
◆2019/11/29

　チャンク座標値込みでブロックを指定する事になるので、
　基本的にメッシュを生成するのは、６方向全てにチャンクが存在するもののみとする。

　チャンクは、ハッシュで管理する。

　チャンクのキーは、Z(12ビット) | Y(12ビット) | X(12ビット) の 36ビットLong型の整数値


　ブロックの座標値は 16ビット(-32768～+32767)　上位12ビットがチャンク座標値になり、下位4ビットがチャンク内のブロック座標値になる。

　